import {createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import {api_headers} from "../../../services/api_headers";

export const selectReviewById = createAsyncThunk(
    'selectReviewById',
    async ({postId}, {rejectWithValue}) => {
        try {  //
            const url = new URL(
                `${process.env.REACT_APP_API_URL}plugins/posts/${postId}/reviews`
            );

            let body = {
                "postId": {postId}
            };

            fetch(url, {
                method: 'GET',
                mode: "cors",
                headers: api_headers,
                body: JSON.stringify(body),
            }).then(response => {
                return response.json()
            })
        } catch (error) {
            if (error.response && error.response.data.message) {
                return rejectWithValue(error.response.data.message)
            } else {
                return rejectWithValue(error.message)
            }
        }
    }
)

export const listReviews = createAsyncThunk(
    'listReviews',
    async ({postId}, {rejectWithValue}) => {
        try {  //
            const url = new URL(
                `${process.env.REACT_APP_API_URL}plugins/posts/${postId}/reviews`
            );

            let body = {
                "postId": {postId}
            };

            fetch(url, {
                method: 'GET',
                mode: "cors",
                headers: api_headers,
                body: JSON.stringify(body),
            }).then(response => {
                return response.json()
            })
        } catch (error) {
            if (error.response && error.response.data.message) {
                return rejectWithValue(error.response.data.message)
            } else {
                return rejectWithValue(error.message)
            }
        }
    }
)

export const storeReview = createAsyncThunk(
    'storeReview',
    async ({postId, userId, reviewRating, comment}, {rejectWithValue}) => {
        try {  //
            const url = new URL(
                `${process.env.REACT_APP_API_URL}plugins/posts/${postId}/reviews`
            );

            let body = {
                "comment": {comment},  //The reviews's message. default: "null"
                "rating": {reviewRating}, //The reviews's rating.
                "post_id": {postId}, //The listing's ID.
                "user_id": {userId}, //The logged user's ID.
                "captcha_key": "quidem" //Key generated by the CAPTCHA endpoint calling (Required when the CAPTCHA verification is enabled from the Admin panel).
            };

            fetch(url, {
                method: 'POST',
                mode: "cors",
                headers: api_headers,
                body: JSON.stringify(body),
            }).then(response => {
                return response.json()
            })
        } catch (error) {
            if (error.response && error.response.data.message) {
                return rejectWithValue(error.response.data.message)
            } else {
                return rejectWithValue(error.message)
            }
        }
    }
)

export const deleteReview = createAsyncThunk(
    'deleteReview',
    async ({postId, ids}, {rejectWithValue}) => {
        try {  //
            const url = new URL(
                `${process.env.REACT_APP_API_URL}plugins/posts/${postId}/reviews/${ids}`
            );
            fetch(url, {
                method: 'DELETE',
                mode: "cors",
                headers: api_headers,
            }).then(response => {
                return response.json()
            })
        } catch (error) {
            if (error.response && error.response.data.message) {
                return rejectWithValue(error.response.data.message)
            } else {
                return rejectWithValue(error.message)
            }
        }
    }
)

const initialState = [
    {id: '1', title: 'First Review!', content: 'Hello!'},
    {id: '2', title: 'Second Review', content: 'More text'}
]

const reviewsSlice = createSlice({
    name: 'reviews',
    initialState,
    reducers: {
        reviewAdded: {
            reducer(state, action) {
                state.reviews.push(action.payload)
            },
            prepare(title, content, userId) {
                // omit prepare logic
            }
        },
        reviewUpdated(state, action) {
            const {id, title, content} = action.payload
            const existingReview = state.reviews.find(review => review.id === id)
            if (existingReview) {
                existingReview.title = title
                existingReview.content = content
            }
        }
    }
})

export const {reviewAdded, reviewUpdated} = reviewsSlice.actions

export default reviewsSlice.reducer

export const selectAllReviews = state => state.reviews.reviews

export const selectPostById = (state, postId) =>
    state.reviews.reviews.find(post => review.postId === postId)